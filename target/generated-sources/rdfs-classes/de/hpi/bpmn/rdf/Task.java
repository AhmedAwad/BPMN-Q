/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 1/3/11 6:01 PM
 */
package de.hpi.bpmn.rdf;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Loopcondition </li>
 *   <li> Loopcounter </li>
 *   <li> Loopmaximum </li>
 *   <li> Looptype </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 1/3/11 6:01 PM
 */
public class Task extends Activity {

    /** http://b3mn.org/stencilset/bpmn1.1#Task */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://b3mn.org/stencilset/bpmn1.1#Task", false);

    /** http://oryx-editor.org/loopcondition */
    @SuppressWarnings("hiding")
	public static final URI LOOPCONDITION = new URIImpl("http://oryx-editor.org/loopcondition",false);

    /** http://oryx-editor.org/loopcounter */
    @SuppressWarnings("hiding")
	public static final URI LOOPCOUNTER = new URIImpl("http://oryx-editor.org/loopcounter",false);

    /** http://oryx-editor.org/loopmaximum */
    @SuppressWarnings("hiding")
	public static final URI LOOPMAXIMUM = new URIImpl("http://oryx-editor.org/loopmaximum",false);

    /** http://oryx-editor.org/looptype */
    @SuppressWarnings("hiding")
	public static final URI LOOPTYPE = new URIImpl("http://oryx-editor.org/looptype",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://oryx-editor.org/loopcondition",false),
      new URIImpl("http://oryx-editor.org/loopcounter",false),
      new URIImpl("http://oryx-editor.org/loopmaximum",false),
      new URIImpl("http://oryx-editor.org/looptype",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Task ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Task ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Task ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Task ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Task ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Task  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Task  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Task.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://b3mn.org/stencilset/bpmn1.1#Task).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Task> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Task.class );
	}

    /**
	 * Remove rdf:type Task from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33d8f7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBpmnLoopcondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOOPCONDITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33d8f7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBpmnLoopcondition() {
		return Base.has(this.model, this.getResource(), LOOPCONDITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33d8f7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBpmnLoopcondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOOPCONDITION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33d8f7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBpmnLoopcondition( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOOPCONDITION);
	}

     /**
     * Get all values of property Loopcondition as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopcondition_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOOPCONDITION);
	}
	
    /**
     * Get all values of property Loopcondition as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopcondition_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOOPCONDITION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Loopcondition as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopcondition_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOOPCONDITION);
	}

    /**
     * Get all values of property Loopcondition as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopcondition_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOOPCONDITION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Loopcondition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllBpmnLoopcondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOOPCONDITION, java.lang.String.class);
	}
	
    /**
     * Get all values of property Loopcondition as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllBpmnLoopcondition_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOOPCONDITION, java.lang.String.class);
	}

    /**
     * Get all values of property Loopcondition     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllBpmnLoopcondition() {
		return Base.getAll(this.model, this.getResource(), LOOPCONDITION, java.lang.String.class);
	}

    /**
     * Get all values of property Loopcondition as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllBpmnLoopcondition_as() {
		return Base.getAll_as(this.model, this.getResource(), LOOPCONDITION, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Loopcondition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBpmnLoopcondition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOOPCONDITION, value);
	}
	
    /**
     * Adds a value to property Loopcondition as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBpmnLoopcondition( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOOPCONDITION, value);
	}
    /**
     * Adds a value to property Loopcondition from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBpmnLoopcondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LOOPCONDITION, value);
	}
	
    /**
     * Adds a value to property Loopcondition from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBpmnLoopcondition(java.lang.String value) {
		Base.add(this.model, this.getResource(), LOOPCONDITION, value);
	}
  

    /**
     * Sets a value of property Loopcondition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBpmnLoopcondition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOOPCONDITION, value);
	}
	
    /**
     * Sets a value of property Loopcondition from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBpmnLoopcondition( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOOPCONDITION, value);
	}
    /**
     * Sets a value of property Loopcondition from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBpmnLoopcondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LOOPCONDITION, value);
	}
	
    /**
     * Sets a value of property Loopcondition from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBpmnLoopcondition(java.lang.String value) {
		Base.set(this.model, this.getResource(), LOOPCONDITION, value);
	}
  


    /**
     * Removes a value of property Loopcondition as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBpmnLoopcondition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOOPCONDITION, value);
	}
	
    /**
     * Removes a value of property Loopcondition as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBpmnLoopcondition( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOOPCONDITION, value);
	}
    /**
     * Removes a value of property Loopcondition given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBpmnLoopcondition(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LOOPCONDITION, value);
	}
	
    /**
     * Removes a value of property Loopcondition given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBpmnLoopcondition(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LOOPCONDITION, value);
	}
  
    /**
     * Removes all values of property Loopcondition     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBpmnLoopcondition( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOOPCONDITION);
	}
	
    /**
     * Removes all values of property Loopcondition	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBpmnLoopcondition() {
		Base.removeAll(this.model, this.getResource(), LOOPCONDITION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ac35b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBpmnLoopcounter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOOPCOUNTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ac35b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBpmnLoopcounter() {
		return Base.has(this.model, this.getResource(), LOOPCOUNTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ac35b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBpmnLoopcounter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOOPCOUNTER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@9ac35b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBpmnLoopcounter( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOOPCOUNTER);
	}

     /**
     * Get all values of property Loopcounter as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopcounter_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOOPCOUNTER);
	}
	
    /**
     * Get all values of property Loopcounter as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopcounter_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOOPCOUNTER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Loopcounter as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopcounter_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOOPCOUNTER);
	}

    /**
     * Get all values of property Loopcounter as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopcounter_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOOPCOUNTER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Loopcounter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllBpmnLoopcounter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOOPCOUNTER, java.lang.String.class);
	}
	
    /**
     * Get all values of property Loopcounter as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllBpmnLoopcounter_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOOPCOUNTER, java.lang.String.class);
	}

    /**
     * Get all values of property Loopcounter     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllBpmnLoopcounter() {
		return Base.getAll(this.model, this.getResource(), LOOPCOUNTER, java.lang.String.class);
	}

    /**
     * Get all values of property Loopcounter as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllBpmnLoopcounter_as() {
		return Base.getAll_as(this.model, this.getResource(), LOOPCOUNTER, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Loopcounter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBpmnLoopcounter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOOPCOUNTER, value);
	}
	
    /**
     * Adds a value to property Loopcounter as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBpmnLoopcounter( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOOPCOUNTER, value);
	}
    /**
     * Adds a value to property Loopcounter from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBpmnLoopcounter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LOOPCOUNTER, value);
	}
	
    /**
     * Adds a value to property Loopcounter from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBpmnLoopcounter(java.lang.String value) {
		Base.add(this.model, this.getResource(), LOOPCOUNTER, value);
	}
  

    /**
     * Sets a value of property Loopcounter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBpmnLoopcounter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOOPCOUNTER, value);
	}
	
    /**
     * Sets a value of property Loopcounter from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBpmnLoopcounter( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOOPCOUNTER, value);
	}
    /**
     * Sets a value of property Loopcounter from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBpmnLoopcounter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LOOPCOUNTER, value);
	}
	
    /**
     * Sets a value of property Loopcounter from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBpmnLoopcounter(java.lang.String value) {
		Base.set(this.model, this.getResource(), LOOPCOUNTER, value);
	}
  


    /**
     * Removes a value of property Loopcounter as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBpmnLoopcounter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOOPCOUNTER, value);
	}
	
    /**
     * Removes a value of property Loopcounter as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBpmnLoopcounter( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOOPCOUNTER, value);
	}
    /**
     * Removes a value of property Loopcounter given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBpmnLoopcounter(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LOOPCOUNTER, value);
	}
	
    /**
     * Removes a value of property Loopcounter given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBpmnLoopcounter(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LOOPCOUNTER, value);
	}
  
    /**
     * Removes all values of property Loopcounter     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBpmnLoopcounter( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOOPCOUNTER);
	}
	
    /**
     * Removes all values of property Loopcounter	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBpmnLoopcounter() {
		Base.removeAll(this.model, this.getResource(), LOOPCOUNTER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ee13d0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBpmnLoopmaximum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOOPMAXIMUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ee13d0 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBpmnLoopmaximum() {
		return Base.has(this.model, this.getResource(), LOOPMAXIMUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ee13d0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBpmnLoopmaximum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOOPMAXIMUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@ee13d0 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBpmnLoopmaximum( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOOPMAXIMUM);
	}

     /**
     * Get all values of property Loopmaximum as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopmaximum_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOOPMAXIMUM);
	}
	
    /**
     * Get all values of property Loopmaximum as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopmaximum_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOOPMAXIMUM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Loopmaximum as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopmaximum_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOOPMAXIMUM);
	}

    /**
     * Get all values of property Loopmaximum as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBpmnLoopmaximum_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOOPMAXIMUM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Loopmaximum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllBpmnLoopmaximum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOOPMAXIMUM, java.lang.String.class);
	}
	
    /**
     * Get all values of property Loopmaximum as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllBpmnLoopmaximum_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOOPMAXIMUM, java.lang.String.class);
	}

    /**
     * Get all values of property Loopmaximum     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllBpmnLoopmaximum() {
		return Base.getAll(this.model, this.getResource(), LOOPMAXIMUM, java.lang.String.class);
	}

    /**
     * Get all values of property Loopmaximum as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllBpmnLoopmaximum_as() {
		return Base.getAll_as(this.model, this.getResource(), LOOPMAXIMUM, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Loopmaximum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBpmnLoopmaximum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOOPMAXIMUM, value);
	}
	
    /**
     * Adds a value to property Loopmaximum as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBpmnLoopmaximum( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOOPMAXIMUM, value);
	}
    /**
     * Adds a value to property Loopmaximum from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBpmnLoopmaximum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LOOPMAXIMUM, value);
	}
	
    /**
     * Adds a value to property Loopmaximum from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBpmnLoopmaximum(java.lang.String value) {
		Base.add(this.model, this.getResource(), LOOPMAXIMUM, value);
	}
  

    /**
     * Sets a value of property Loopmaximum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBpmnLoopmaximum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOOPMAXIMUM, value);
	}
	
    /**
     * Sets a value of property Loopmaximum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBpmnLoopmaximum( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOOPMAXIMUM, value);
	}
    /**
     * Sets a value of property Loopmaximum from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBpmnLoopmaximum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LOOPMAXIMUM, value);
	}
	
    /**
     * Sets a value of property Loopmaximum from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBpmnLoopmaximum(java.lang.String value) {
		Base.set(this.model, this.getResource(), LOOPMAXIMUM, value);
	}
  


    /**
     * Removes a value of property Loopmaximum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBpmnLoopmaximum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOOPMAXIMUM, value);
	}
	
    /**
     * Removes a value of property Loopmaximum as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBpmnLoopmaximum( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOOPMAXIMUM, value);
	}
    /**
     * Removes a value of property Loopmaximum given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBpmnLoopmaximum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LOOPMAXIMUM, value);
	}
	
    /**
     * Removes a value of property Loopmaximum given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBpmnLoopmaximum(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LOOPMAXIMUM, value);
	}
  
    /**
     * Removes all values of property Loopmaximum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBpmnLoopmaximum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOOPMAXIMUM);
	}
	
    /**
     * Removes all values of property Loopmaximum	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBpmnLoopmaximum() {
		Base.removeAll(this.model, this.getResource(), LOOPMAXIMUM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b7e45 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasBpmnLooptype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOOPTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b7e45 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasBpmnLooptype() {
		return Base.has(this.model, this.getResource(), LOOPTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b7e45 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasBpmnLooptype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOOPTYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b7e45 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasBpmnLooptype( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOOPTYPE);
	}

     /**
     * Get all values of property Looptype as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBpmnLooptype_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOOPTYPE);
	}
	
    /**
     * Get all values of property Looptype as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBpmnLooptype_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOOPTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Looptype as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBpmnLooptype_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOOPTYPE);
	}

    /**
     * Get all values of property Looptype as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllBpmnLooptype_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOOPTYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Looptype     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllBpmnLooptype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOOPTYPE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Looptype as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllBpmnLooptype_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOOPTYPE, java.lang.String.class);
	}

    /**
     * Get all values of property Looptype     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllBpmnLooptype() {
		return Base.getAll(this.model, this.getResource(), LOOPTYPE, java.lang.String.class);
	}

    /**
     * Get all values of property Looptype as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllBpmnLooptype_as() {
		return Base.getAll_as(this.model, this.getResource(), LOOPTYPE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Looptype as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addBpmnLooptype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOOPTYPE, value);
	}
	
    /**
     * Adds a value to property Looptype as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addBpmnLooptype( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOOPTYPE, value);
	}
    /**
     * Adds a value to property Looptype from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addBpmnLooptype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LOOPTYPE, value);
	}
	
    /**
     * Adds a value to property Looptype from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addBpmnLooptype(java.lang.String value) {
		Base.add(this.model, this.getResource(), LOOPTYPE, value);
	}
  

    /**
     * Sets a value of property Looptype from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setBpmnLooptype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOOPTYPE, value);
	}
	
    /**
     * Sets a value of property Looptype from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setBpmnLooptype( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOOPTYPE, value);
	}
    /**
     * Sets a value of property Looptype from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setBpmnLooptype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LOOPTYPE, value);
	}
	
    /**
     * Sets a value of property Looptype from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setBpmnLooptype(java.lang.String value) {
		Base.set(this.model, this.getResource(), LOOPTYPE, value);
	}
  


    /**
     * Removes a value of property Looptype as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeBpmnLooptype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOOPTYPE, value);
	}
	
    /**
     * Removes a value of property Looptype as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeBpmnLooptype( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOOPTYPE, value);
	}
    /**
     * Removes a value of property Looptype given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeBpmnLooptype(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LOOPTYPE, value);
	}
	
    /**
     * Removes a value of property Looptype given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeBpmnLooptype(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LOOPTYPE, value);
	}
  
    /**
     * Removes all values of property Looptype     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllBpmnLooptype( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOOPTYPE);
	}
	
    /**
     * Removes all values of property Looptype	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllBpmnLooptype() {
		Base.removeAll(this.model, this.getResource(), LOOPTYPE);
	}
 }